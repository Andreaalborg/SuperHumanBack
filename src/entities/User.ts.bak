import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  CreateDateColumn,
  UpdateDateColumn,
  OneToMany,
  BeforeInsert,
  BeforeUpdate,
} from 'typeorm';
import * as bcrypt from 'bcryptjs';

@Entity('users')
export class User {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ unique: true })
  email: string;

  @Column({ select: false }) // Don't include password in queries by default
  passwordHash: string;

  @Column({ nullable: true })
  name: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  // Fleksibelt JSON felt for fremtidige features!
  @Column({ type: 'jsonb', default: {} })
  metadata: {
    avatar?: string;
    age?: number;
    gender?: string;
    height?: number;
    weight?: number;
    onboardingCompleted?: boolean;
    level?: number;
    totalScore?: number;
    preferences?: {
      mainGoal?: string;
      focusAreas?: string[];
      dailyTime?: string;
    };
    [key: string]: any; // Tillater alle fremtidige felter
  };

  // Hash password before saving
  @BeforeInsert()
  @BeforeUpdate()
  async hashPassword() {
    if (this.passwordHash && !this.passwordHash.startsWith('$2')) {
      this.passwordHash = await bcrypt.hash(this.passwordHash, 10);
    }
  }

  // Helper method to check password
  async comparePassword(password: string): Promise<boolean> {
    return bcrypt.compare(password, this.passwordHash);
  }
}
