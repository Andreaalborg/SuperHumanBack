import OpenAI from 'openai';
import { User } from '../entities/User';
import { Activity } from '../entities/Activity';
import { UserProgress } from '../entities/UserProgress';

// Initialize OpenAI client - delay until first use
let openai: OpenAI | null = null;
let openaiInitialized = false;

function getOpenAIClient(): OpenAI | null {
  if (!openaiInitialized) {
    openaiInitialized = true;
    try {
      if (process.env.OPENAI_API_KEY) {
        openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });
        console.log('ü§ñ AI Service Status: ‚úÖ OpenAI Connected');
      } else {
        console.log('ü§ñ AI Service Status: ‚ùå Using Fallback (No API Key)');
      }
    } catch (error) {
      console.error('ü§ñ AI Service Status: ‚ùå Failed to initialize OpenAI:', error);
      openai = null;
    }
  }
  return openai;
}

export interface AIContext {
  totalScore: number;
  recentActivities: Array<{
    name: string;
    categoryId: string;
    points: number;
  }>;
  userGoals?: string;
  focusAreas?: string[];
}

export interface AIResponse {
  content: string;
  suggestions: string[];
}

export class AIService {
  async generateResponse(
    message: string,
    context: AIContext | null,
    user: User | null
  ): Promise<AIResponse> {
    // Get OpenAI client (lazy initialization)
    const openaiClient = getOpenAIClient();
    
    // If no OpenAI API key, use fallback logic
    if (!openaiClient) {
      return this.generateFallbackResponse(message, context, user);
    }

    try {
      // Build system prompt with user context
      const systemPrompt = this.buildSystemPrompt(context || { totalScore: 0, recentActivities: [] }, user || { id: 'mock', email: 'user@example.com', name: 'User' } as User);
      
      // Call OpenAI API
      console.log('üì§ Sending to OpenAI:', message.substring(0, 50) + '...');
      const completion = await openaiClient.chat.completions.create({
        model: 'gpt-3.5-turbo', // Changed from gpt-4-turbo-preview
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        temperature: 0.8,
        max_tokens: 600,
      });
      console.log('‚úÖ OpenAI responded successfully');

      const aiContent = completion.choices[0]?.message?.content || 'Beklager, jeg fikk ikke generert et svar.';
      
      // Generate contextual suggestions
      const suggestions = this.generateSuggestions(message, context || { totalScore: 0, recentActivities: [] });
      
      return {
        content: aiContent,
        suggestions,
      };
    } catch (error: any) {
      console.error('‚ùå OpenAI API error:', error.message || error);
      console.error('Using fallback response instead');
      return this.generateFallbackResponse(message, context || { totalScore: 0, recentActivities: [] }, user || { id: 'mock', email: 'user@example.com', name: 'User' } as User);
    }
  }

  private buildSystemPrompt(context: AIContext, user: User): string {
    const userName = user.name || 'bruker';
    const mainGoal = context.userGoals || 'personlig vekst';
    const focusAreas = context.focusAreas?.join(', ') || 'generell forbedring';
    const userLevel = Math.floor(context.totalScore / 100);
    const timeOfDay = new Date().getHours();
    const greeting = timeOfDay < 12 ? 'God morgen' : timeOfDay < 18 ? 'God ettermiddag' : 'God kveld';
    
    return `Du er en personlig AI-coach i SuperHuman-appen som hjelper ${userName} med menneskelig optimalisering og selvforbedring.

PERSONLIGHET OG TONE:
- V√¶r entusiastisk, motiverende og st√∏ttende, men ALDRI overfladisk
- Snakk som en kunnskapsrik venn og mentor, ikke en robot
- Bruk humor n√•r det passer, men v√¶r profesjonell
- V√¶r √¶rlig og direkte - si det som det er
- Tilpass tonen til brukerens hum√∏r og energiniv√•

EKSPERTOMR√ÖDER:
- Fysisk helse: Trening, kosthold, s√∏vn, restitusjon
- Mental styrke: Mindfulness, stressmestring, fokus, disiplin
- Produktivitet: Timeblokking, dyp arbeid, vanebygging
- Sosiale ferdigheter: Kommunikasjon, relasjoner, nettverk
- Personlig vekst: M√•lsetting, selvrefleksjon, l√¶ring

BRUKERENS PROFIL:
- Navn: ${userName} (Niv√• ${userLevel})
- Poeng: ${context.totalScore} 
- Hovedm√•l: ${mainGoal}
- Fokusomr√•der: ${focusAreas}
- Nylige aktiviteter: ${context.recentActivities.length > 0 ? context.recentActivities.map(a => `${a.name} (${a.points}p)`).join(', ') : 'Ingen aktiviteter registrert enn√•'}
- Tid p√• d√∏gnet: ${greeting}

SVAR-REGLER:
1. Analyser N√òYE hva brukeren sp√∏r om og svar DIREKTE
2. Hvis brukeren sp√∏r generelt, still oppf√∏lgingssp√∏rsm√•l for √• forst√• deres situasjon
3. Gi alltid 1-3 konkrete, handlingsbare tips de kan gj√∏re N√Ö
4. Bruk eksempler fra deres registrerte aktiviteter n√•r relevant
5. V√¶r spesifikk med tall, tider og metoder (ikke bare "tren mer")
6. Hvis de sliter, v√¶r empatisk f√∏rst, deretter l√∏sningsorientert
7. Utfordre dem n√•r de er klare for det, men m√∏t dem der de er

SVARFORMAT:
- Start med √• anerkjenne deres sp√∏rsm√•l/situasjon
- Gi konkret, praktisk veiledning (ikke generelle r√•d)
- Avslutt med EN spesifikk handling de kan ta med en gang
- Bruk 1-2 relevante emojis for vennlighet
- Hold svaret mellom 3-5 setninger (med mindre de ber om mer)

EKSEMPEL P√Ö BRA SVAR:
Bruker: "Jeg er s√• sliten"
D√•rlig: "Pr√∏v √• sove mer! üí§"
Bra: "Forst√•r at du er sliten n√• ${greeting === 'God kveld' ? 'p√• kvelden' : 'p√• dagen'} üòä Basert p√• aktivitetene dine ser jeg at du ikke har logget s√∏vn p√• en stund. Pr√∏v en 20-minutters powernap n√• hvis mulig, eller g√• en rask 5-minutters g√•tur for √• √∏ke energien. Hva tror du passer best akkurat n√•?"

VIKTIG: V√¶r ALDRI generisk. Hver respons skal f√∏les personlig og relevant for ${userName}.`;
  }

  private generateSuggestions(message: string, context: AIContext): string[] {
    const lowerMessage = message.toLowerCase();
    
    // Context-aware suggestions based on conversation
    if (lowerMessage.includes('m√•l') || lowerMessage.includes('goal')) {
      return [
        'Hvordan setter jeg SMART m√•l?',
        'Vis meg mine fremgangsm√•l',
        'Hjelp meg justere m√•lene mine',
        'Hva er realistiske ukem√•l?'
      ];
    }
    
    if (lowerMessage.includes('trening') || lowerMessage.includes('fysisk')) {
      return [
        'Lag en treningsplan for meg',
        'Beste √∏velser for hjemmetrening',
        'Hvordan √∏ke motivasjonen?',
        'Tips for √• unng√• skader'
      ];
    }
    
    if (lowerMessage.includes('stress') || lowerMessage.includes('mental')) {
      return [
        'L√¶r meg pust√∏velser',
        'Hvordan redusere stress?',
        'Meditasjonsteknikker for nybegynnere',
        'Forbedre s√∏vnkvaliteten'
      ];
    }
    
    // Default suggestions based on user's progress
    if (context.totalScore < 100) {
      return [
        'Hva b√∏r jeg starte med?',
        'Gi meg en enkel ukesplan',
        'Hvordan bygge gode vaner?',
        'Vis meg nybegynnertips'
      ];
    } else {
      return [
        'Analyser min fremgang',
        'Hvordan n√• neste niv√•?',
        'Sammenlign med andre p√• mitt niv√•',
        'Avanserte treningsmetoder'
      ];
    }
  }

  private async generateFallbackResponse(
    message: string,
    context: AIContext | null,
    user: User | null
  ): Promise<AIResponse> {
    const lowerMessage = message.toLowerCase();
    const userName = user?.name || 'der';
    const totalScore = context?.totalScore || 0;
    
    // Analyze message intent and provide contextual responses
    if (lowerMessage.includes('anbefaling') || lowerMessage.includes('tips') || lowerMessage.includes('forslag')) {
      return {
        content: `Basert p√• din score (${totalScore} poeng), anbefaler jeg √• fokusere p√• ${this.getWeakestCategory(context)}. Start med 15-20 minutter daglig aktivitet i denne kategorien. Konsistens er n√∏kkelen! üí™`,
        suggestions: [
          'Gi meg en detaljert plan',
          'Hvorfor akkurat denne kategorien?',
          'Alternative aktiviteter',
          'Hvordan holde motivasjonen?'
        ]
      };
    }
    
    if (lowerMessage.includes('fremgang') || lowerMessage.includes('progress')) {
      const trend = totalScore > 500 ? 'imponerende' : 'lovende';
      return {
        content: `Din fremgang ser ${trend} ut, ${userName}! Med ${totalScore} poeng er du p√• niv√• ${Math.floor(totalScore / 100)}. ${this.getProgressTip(context)} Fortsett slik! üìà`,
        suggestions: [
          'Vis detaljert analyse',
          'Sammenlign med forrige m√•ned',
          'Hva er mine sterke sider?',
          'Omr√•der for forbedring'
        ]
      };
    }
    
    if (lowerMessage.includes('s√∏vn') || lowerMessage.includes('sleep')) {
      return {
        content: 'For bedre s√∏vn: 1) Konsistent leggetid, 2) Ingen skjermer 1 time f√∏r, 3) Kj√∏lig rom (16-19¬∞C), 4) Ingen koffein etter 14:00. Start med √©n endring om gangen! üò¥',
        suggestions: [
          'Hvorfor er s√∏vn viktig?',
          'Lag en kveldrutine',
          'H√•ndtere s√∏vnproblemer',
          'Spore s√∏vnkvalitet'
        ]
      };
    }
    
    if (lowerMessage.includes('klokk') || lowerMessage.includes('tid')) {
      const now = new Date();
      return {
        content: `Klokken er n√• ${now.toLocaleTimeString('nb-NO', { hour: '2-digit', minute: '2-digit' })}. Husk at timing er viktig for produktivitet! Er det p√• tide med en aktivitet? ‚è∞`,
        suggestions: [
          'Hva b√∏r jeg gj√∏re n√•?',
          'Planlegg resten av dagen',
          'Beste tidspunkt for trening',
          'N√•r b√∏r jeg legge meg?'
        ]
      };
    }
    
    if (lowerMessage.includes('poeng') || lowerMessage.includes('score')) {
      return {
        content: `Du har totalt ${totalScore} poeng og er p√• niv√• ${Math.floor(totalScore / 100)}! ${this.getProgressTip(context)} üèÜ`,
        suggestions: [
          'Hvordan f√•r jeg flere poeng?',
          'Vis detaljert statistikk',
          'Sammenlign med andre',
          'Hva er neste niv√•?'
        ]
      };
    }
    
    if (lowerMessage.includes('m√•l') || lowerMessage.includes('goal')) {
      return {
        content: `La oss sette SMART m√•l! Basert p√• din aktivitet foresl√•r jeg: 1) Daglig: Minst √©n aktivitet i hver kategori, 2) Ukentlig: 500+ poeng, 3) M√•nedlig: N√• niv√• ${Math.floor(totalScore / 100) + 2}. Hvilken kategori vil du fokusere p√•? üéØ`,
        suggestions: [
          'Lag detaljert m√•lplan',
          'Fysiske m√•l',
          'Mentale m√•l',
          'Karrierem√•l'
        ]
      };
    }
    
    // Default response - but make it more relevant
    const randomTips = [
      `Hei ${userName}! Basert p√• dine ${totalScore} poeng ser jeg at du er p√• rett vei. Hva vil du jobbe med i dag?`,
      `Flott √• se deg igjen, ${userName}! Med ${context?.recentActivities?.length || 0} nylige aktiviteter viser du god konsistens. Hvordan kan jeg hjelpe?`,
      `Velkommen tilbake! Din dedikasjon inspirerer meg. La oss ta din utvikling til neste niv√•! üí™`
    ];
    
    return {
      content: randomTips[Math.floor(Math.random() * randomTips.length)],
      suggestions: [
        'Gi meg dagens anbefalinger',
        'Analyser min fremgang',
        'Sett nye m√•l',
        'Tips for motivasjon'
      ]
    };
  }

  private getWeakestCategory(context: AIContext | null): string {
    // Analyze which category needs most attention
    const categoryCounts: Record<string, number> = {};
    (context?.recentActivities || []).forEach(activity => {
      categoryCounts[activity.categoryId] = (categoryCounts[activity.categoryId] || 0) + 1;
    });
    
    const allCategories = ['physical', 'mental', 'career', 'social'];
    const weakest = allCategories.find(cat => !categoryCounts[cat]) || 'mental';
    
    const categoryNames: Record<string, string> = {
      physical: 'fysisk aktivitet',
      mental: 'mental trening',
      career: 'karriereutvikling',
      social: 'sosiale ferdigheter'
    };
    
    return categoryNames[weakest] || 'balansert utvikling';
  }

  private getProgressTip(context: AIContext | null): string {
    const totalScore = context?.totalScore || 0;
    if (totalScore < 100) {
      return 'Fokuser p√• √• bygge daglige rutiner.';
    } else if (totalScore < 500) {
      return 'Du bygger momentum - hold fokus p√• konsistens.';
    } else if (totalScore < 1000) {
      return 'Imponerende dedikasjon! Vurder √• √∏ke intensiteten.';
    } else {
      return 'Du er en ekte SuperHuman! Fortsett √• inspirere andre.';
    }
  }
}

export const aiService = new AIService();